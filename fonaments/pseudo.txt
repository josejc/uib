---Variables i valors
	const
		Ed = 0.1;
	type
		partc = record				      
				part: rect;
				acel: array[1..3] of real;
				velc: array[1..4] of real;
				fuel: array[1..4] of real;
				posn: array[1..4] of real;
			end;
		sist = array[1..5] of partc;		{Max. 5 particulas}
		bot = array[1..4] of rect;
		sld = array[1..2, 1..6] of rect;
		vsld = array[1..6] of real;
--Funcions
// Eleva num a la potència donada
function elev (num: real; pot: integer): real;

// Assigna la grandària de la partícula segons la massa
function taman (masa: real; punto: point): rect;

// Inicialitza el sistema de partícules
procedure inic_sist (var sp: sist);
// El sistema de particules son N particules cadascuna amb vectors 2d (x,y)
// - acceleració: vector(x,y), m=massa de la partícula
// - velocitat: vectors (x,y), (a,b)? temps anterior?
// - força: vectors (x,y), (a,b)=sentit 0=positiu (+), 1=negatiu (-)
// - posició: vectors (x,y), (a,b)?

// Inicialitza el valor dels 'sliders' 
procedure inic_vsld (var sl: vsld);
// Son 6 tots amb v=0.0000000001
// -Massa
// -Increment temps
// -Distància equilibri
// -Desplaçament
// -Energia tèrmica
// -Viscositat

// Inicialitza els botons
procedure inic_bot (var bt: bot);
// -Crear
// -Moure
// -Esborrar
// -Sortir

// Inicialitza els rectangles que representa el valor dels 'sliders'
procedure inic_slid (var sd: sld);


// Escriu el nom dels elements gràfics
procedure nombres;
// -sliders
// -botons

// Dibuixa els elements gráfics
procedure pantalla (bt: bot; sd: sld; md: rect);
// Area del sistema de partícules
// Botons, sliders i noms

// Calcula la força (vector 2d)
procedure calc_fuel (pan, nm: integer; sl: vsld; var sp: sist);
// pan = nombre partícules al sistema
// nm = nombre partícula de la que esteim calculant la força
// sl = valors dels sliders (valors del sistema)
// sp = sistema de partícules
// La força d'aquesta partícula depen de totes les particules, excepte de ella mateixa
inici
  força_partícula_calculam = 0
  per a totes partícules
      si partícula_actual!=partícula_calculam
          calcula_distancia_entre_elles (diferencia posicions/arrel quadrada distancia)
          aplica la formula F
          força_particula_calculam += F
      fsi
  fper
fi

// Càlcula l'acceleració (vector 2d)
procedure calc_acel (num: integer; sl: vsld; var sp: sist);
// num = nombre partícula de la que calculam l'acceleració
// sl = valors dels sliders
// sp = sistema de partícules
acceleració_vector = força_vector / acceleració

// Cálcula velocitat
procedure calc_velc (num: integer; sl: vsld; var sp: sist);
// num = nombre partícula de la que calculam la velocitat
// sl = valors dels sliders
// sp = sistema de partícules
vectors velocitat
a,b = x,y
x,y = a,b + (slider_incr.temps * vector_acceleració)
x,y = x,y * slider_desplaçament
Sentinelles amb màxim velocitat i mínim
Sentinelles força (a,b)
a controla desplaçament horitzontal velocitat_x, si a=0 x es positiu, sino x es negatiu
b controla desplaçament vertical velocitat_y, si b=0 y es positiu, sino y es negatiu

// Càlcula viscositat
procedure calc_visc (num: integer; sl: vsld; var sp: sist);
// num = nombre partícula afectada per la viscositat
// sl = valors dels sliders
// sp = sistema de partícules
// El cálcul de la viscositat afecta al vector força x,y d'aquesta partícula
x -= (slider_viscositat*vector_velocitat_x)
y -= (slider_viscositat*vector_velocitat_y)

// Càlcula nova posició 2d (vector)
procedure calc_posn (num: integer; sl: vsld; var sp: sist);
// num = nombre partícula de la que calculam la posició
// sl = valors dels sliders
// sp = sistema de partícules
posicio_x += (slider_inc_temps * (velocitat_x + velocitat_a))/2
posicio_y += (slider_inc_temps * (velocitat_y + velocitat_b))/2
comprobación posició dins limits mon
si surt per la dreta (x>limit_dreta)
  negam força_a (0=1,1=0)
  calculam posició_x dins limits
fsi
si surt per la esquerra (x<limit_esquerra)
  negam força_a (0=1,1=0)
  calculam posicio_x dins limits
 fsi
si surt per dalt (y>limit_alt)
  negam força_b (0=1,1=0)
  calculam posicio_y dins limits
fsi
si surt per baix (y<limit_baix)
  negam força_b (0=1,1=0)
  calculam posicio_y dins limits
 fsi

// Dibuixa partícula gráfica
	procedure dibuja (num: integer; var sp: sist);
// num = nombre partícula que dibuixam
// sp = sistema de partícules
vector posicio (a,b)
si (a,b) dins mon
  calcula_tamany(massa_partícula->acceleracio_m)
  dibuixa_partícula_gráfica
fsi

// Sistema de partícules dinámic
procedure sist_part (num: integer; sl: vsld; var sp: sist);
// num = nombre partícula feim els càlculs amb valors del sistema (sliders)
per a totes les partícules del sistema
    calcula_força
    calcula_velocitat
    calcula_viscositat
    calcula_acceleració
    calcula_velocitat
    calcula_posició
fper

// Creació nova partícula, acció cridada pel botó de la UI
procedure crear (bt: bot; md: rect; var num: integer; var sp: sist; sl: vsld);
// bt = botons
// md = mon
// num = nombre total partícules al sistema
// sp = sistema partícules
// sl = valors dels 'sliders'
repetir
    repetir
        cridar_sist_partícules -> continua movent partícules als sistema
    fins hi hagi pitjat un boto
    si ha pitjat dins el mon
        si slider_massa != 0 i num_total_particules !=5 (màxim 5 partícules al sistema)
          num++
          Incrementa nombre partícules i dibuixa
          posició vector x,y=a,b=coordenades on ha pitjat el ratolí 
          partícula = taman(slider_massa, punt)
          dibuixa partícula
        fsi
        finalitza_funció
    fsi
    si ha pitjat boto 4 (sortir)
      finalitza_funcion
    fsi
fins finalitza


// Mou una partícula a una nova posició
procedure mover (bt: bot; md: rect; num: integer; var sp: sist; sl: vsld);
// bt = botons
// md = mon
// num = nombre total partícules al sistema
// sp = sistema partícules
// sl - valors dels 'sliders'
repetir
    repetir
        cridar_sist_partícules
    fins hagi pitjat un botó
    per a totes les partícules del sistema
        comprovar si punt pitjat es una partícula del sistema
        repetir
          si punt pitjat diferent anterior
                si punt pitjat dins mon
                    esborra partícula anterior
                    pinta partícula al nou punt
                    posició=(x,y)=(a,b)=punt
                    força=(x,y),(a,b)=0
                    velocitat=(x,y),(a,b)=0
                    cridar_sist_partícules (contina movent el mon amb les nous vectors)
                fsi
            fsi
            agafa punt
        fins hagi pitjat un botó
        finalitza_funció
    fper
    si punt es botó 4 (sortir(
        finalitza_funció
    fsi
fins finalitza_funció

// Esborra una partícula del sistema
procedure borrar (bt: bot; md: rect; var num: integer; var sp: sist; sl: vsld);
// bt = botons
// md = mon
// num = nombre partícules al sistema
// sp = sistema partícules
// sl = valors dels sliders
repetir
    repetir
        sistema_partícules -> continua en moviment
    fins boto pitjat
    per a totes les particules del sistema
        si punt es una partícula
            esborra_partícula_gráfica
            valors_partícula=0
            num--
            reescriu el nombre partícules
        fsi
    fper
    si punt es botó 4 (sortir)
        finalitza_procediment
    fsi
fins finalitza_procediment

// Funció principal bucle infinit que comprova UI i mou el sistema
procedure opciones (bt: bot; sd: sld; sp: sist; md: rect; np: integer; sl: vsld);
// bt = botons
// sd = sliders
// sp = sistema partícules
// md = mon
// np = nombre partícules
// sl = valors del sliders
repetir
    repetir
        sistema_particules -> calcula els vectors de totes les partícuels
    fins hagi pitjat un botó
    punt on s'ha pitjat
    repetir
        si es un sliders
            esta tot igual
            depenent del sliders diferent escala i valors
            case sliders
                1 - massa: mínim=0.0000000001, max=1 (unitat Kg)
                2 - increment temps: mínim=max=anterior (unitat segons)
                3 - distància equilibri: mínim=1, max=100 (unitat metres)
                4 - desplaçament: mínim=max=(slider 1) (unitat metres)
                5 - energia tèrmica: mínim=0, max=Ed (unitat J.)
                6 - viscositat: mínim=max=(slider 1) (unitat Kg/s)
            fcase
        fsi
        si es un botó
            case botó
                1 - crear
                2 - moure
                3 - esborrar
                4 - sotir
            fcase
        fsi
    fins finalitzar
fins finalitzar

// main
inicialitzacions
pantalla // dibuixa_pantalla
opcions // rutina control fluxe, infinit?
fi
